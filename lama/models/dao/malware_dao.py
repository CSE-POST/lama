"""
Malware DAO class

This class bind Malware object to database.
"""

__author__ = "Valentin Giannini"
__copyright__ = "Copyright 2016, LAMA"
__credits__ = [""]
__license__ = "GPL"
__version__ = "3"
__maintainer__ = "Valentin Giannini - CSE Team"
__email__ = "cse.contact -at- post.lu"
__status__ = "Production"


from sqlalchemy.sql import select

import lama.models.malware
from lama.models.dao.dao import LamaDAO
from lama.models.dao.module_status_dao import ModuleStatusDAO
from lama.utils.database import Lamadb


class MalwareDAO(LamaDAO):

    def create(malware):
        ins = Lamadb.malware.insert().values(
            _parent_uid=malware._parent_uid,
            _name=malware._name,
            _path=malware._path,
            _md5=malware._md5,
            _sha1=malware._sha1,
            _mime=malware._mime,
            _size=malware._size,
            _analysis_uid=malware._analysis_uid,
            _nb_module=malware._nb_module
        )
        result = Lamadb.execute(ins)
        if result:
            malware._uid = result.inserted_primary_key[0]
            return True
        else:
            return False

    def read(uid):
        s = select([Lamadb.malware]).where(Lamadb.malware.c._uid == uid)
        result = Lamadb.execute(s)
        if result.rowcount != 1:
            print("Error read malware DAO")
            return None
        row = result.fetchone()
        malware = MalwareDAO.make_from_row(row)
        return malware

    def find_by_analysis_uid(analysis_uid):
        s = select([Lamadb.malware])\
                    .where(Lamadb.malware.c._analysis_uid == analysis_uid)
        result = Lamadb.execute(s)
        ms_tab = []
        for row in result:
            ms_tab.append(MalwareDAO.make_from_row(row))
        return ms_tab

    def find_by_parent_uid(parent_uid):
        s = select([Lamadb.malware])\
                    .where(Lamadb.malware.c._parent_uid == parent_uid)
        result = Lamadb.execute(s)
        ms_tab = []
        for row in result:
            ms_tab.append(MalwareDAO.make_from_row(row))
        return ms_tab

    def update(malware):
        ins = Lamadb.malware.update()\
                    .where(Lamadb.malware.c._uid == malware.uid)\
                    .values(
                        _parent_uid=malware._parent_uid,
                        _name=malware._name,
                        _path=malware._path,
                        _md5=malware._md5,
                        _sha1=malware._sha1,
                        _mime=malware._mime,
                        _size=malware._size,
                        _nb_module=malware._nb_module,
                        _analysis_uid=malware._analysis_uid
                    )
        res = Lamadb.execute(ins)
        return res.rowcount == 1

    def delete(uid):
        d = Lamadb.malware.delete(Lamadb.malware.c._uid == uid)
        Lamadb.execute(d)

    def make_from_row(row):
        malware = lama.models.malware.Malware(
                     uid=row[Lamadb.malware.c._uid],
                     parent_uid=row[Lamadb.malware.c._parent_uid],
                     path=row[Lamadb.malware.c._path],
                     md5=row[Lamadb.malware.c._md5],
                     sha1=row[Lamadb.malware.c._sha1],
                     name=row[Lamadb.malware.c._name],
                     mime=row[Lamadb.malware.c._mime],
                     size=row[Lamadb.malware.c._size],
                     nb_module=row[Lamadb.malware.c._nb_module],
                     analysis_uid=row[Lamadb.malware.c._analysis_uid]
                     )
        malware._module_status = ModuleStatusDAO.find_by_malware_uid(malware.uid)
        malware._extract_malware = MalwareDAO.find_by_parent_uid(malware.uid)
        return malware
